The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.

For example, for arr = [2,3,4], the median is 3.
For example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.
Implement the MedianFinder class:

MedianFinder() initializes the MedianFinder object.
void addNum(int num) adds the integer num from the data stream to the data structure.
double findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.
 

Example 1:

Input
["MedianFinder", "addNum", "addNum", "findMedian", "addNum", "findMedian"]
[[], [1], [2], [], [3], []]
Output
[null, null, null, 1.5, null, 2.0]

Explanation
MedianFinder medianFinder = new MedianFinder();
medianFinder.addNum(1);    // arr = [1]
medianFinder.addNum(2);    // arr = [1, 2]
medianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)
medianFinder.addNum(3);    // arr[1, 2, 3]
medianFinder.findMedian(); // return 2.0
 

Constraints:

-105 <= num <= 105
There will be at least one element in the data structure before calling findMedian.
At most 5 * 104 calls will be made to addNum and findMedian.


Code: 87ms | Beats 94.35% | Time Complexity O(log N) -> due to heap insertion | Space Complexity: O(N)
class MedianFinder {
    PriorityQueue<Integer> minHeap = new PriorityQueue<>();
    PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a,b) -> b-a);
    int size = 0; 
    public MedianFinder() {
        
    }
    
    public void addNum(int num) {
        size++;
        if (maxHeap.isEmpty() || num <= maxHeap.peek()){
            maxHeap.add(num);
        }else{
            minHeap.add(num);
        }

        //balance the heaps
        if (maxHeap.size() > minHeap.size() + 1){
            Integer element = maxHeap.poll();
            minHeap.add(element);
        } else if (maxHeap.size() < minHeap.size()){
            Integer element = minHeap.poll();
            maxHeap.add(element);
        }
    }
    
    public double findMedian() {
        if (size % 2 != 0) return (double) maxHeap.peek();
        return (maxHeap.peek() + minHeap.peek()) / 2.0;
    }
}

Code Explanation: 
- For this problem, we want to use two heaps that are separated by the upper and lower half of the data stream (lower -> maxHeap & upper -> minHeap) 
- By doing this, we will have the elements that are in the middle of the data stream at the heads of the two heaps 
- If we have [1, 2, 3] -> maxHeap = [1] -> minHeap = [2] -> minHeap = [2,3] -> but since the maxHeap is supposed to have one more element to account for the instances when there are an odd # of elements, we need to make sure to balance out the heaps so [2,3] -> maxHeap = [2, 1] minHeap = [3] and since the size is odd we return just the head of the maxHeap
- So to start off, we create the heaps and a size variable, and within the add method each call to the method, we increment add 
- We handle heap insertion by checking if the maxHeap is either empty or the value we want to add is lower and the head(since we want this to be the first half of the data stream)
- If it is we add to the maxHeap otherwise we add it to the minHeap 
- After insertion, we have to make sure that the heaps are balanced and the maxHeap isn't greater than 1 in terms of size relative to the minHeap, we adjust and add the head value to the other heap accordingly
- Then in the median function, if the total size is odd, then we know we only return one element and return the head of the maxHeap, otherwise we return the average of the head of the two heaps 
