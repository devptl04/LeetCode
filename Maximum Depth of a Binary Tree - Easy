Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.


Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: 3

Example 2:
Input: root = [1,null,2]
Output: 2
 
Constraints:
The number of nodes in the tree is in the range [0, 104].
-100 <= Node.val <= 100

Code: Beats 100% Time Complexity O(n) 
class Solution {
    public int maxDepth(TreeNode root) {
        if (root == null) return 0;
        return Math.max(maxDepth(root.right), maxDepth(root.left)) + 1; 
    }
}

Code Explanation: 
- We want to essentially see how "deep" we can go in a tree, so we want to perform dfs. We call dfs to both the left and right branches, evaluate which one is greater, and also include the root of the current branch we are on
- So essentially, this will go all the way down the child nodes and traverse up adding 1 appropriately for each layer
