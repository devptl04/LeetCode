There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.
You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Example 2:
Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

Example 3:
Input: nums = [1], target = 0
Output: -1
 
Constraints:
1 <= nums.length <= 5000
-104 <= nums[i] <= 104
All values of nums are unique.
nums is an ascending array that is possibly rotated.
-104 <= target <= 104

Code: 0ms | Beats 100%
class Solution {
    public int search(int[] nums, int target) {
        int left = 0; 
        int right = nums.length -1; 
        while (left < right){
            int mid = left + (right - left) /2;
            if (nums[mid] > nums[right]){
                left = mid + 1;
            }else {
                right = mid;  
            }
        }

        int start = left; 
        left = 0; 
        right = nums.length -1; 
        if (nums[start] <= target && target <= nums[right]){
            left = start; 
        }else{
            right = start; 
        }
        while (left <= right){
            int mid = left + (right - left)/2; 
            if (nums[mid] == target){
                return mid; 
            }else if (nums[mid] > target){
                right = mid -1; 
            }else{
                left = mid + 1; 
            }
        }
        return -1; 
    }
}

Code walkthrough/explanation: 
- Since we know that the array was initially sorted, but pivoted at a certain index, we want to find the index where the pivot originally began 
- To find this in O(log N) time, we first do a binary search algorithm that indexes through the array, and when an instance where a value is greater than the last value (since the array is sorted the last value should always be the greatest) we know that its part of the pivoted section of the array, so we shift the left pointer to the next index past mid
- We run this loop until eventually, the left index is equal to the pivot index
- After this, we set a new variable equal to left (to hold the pivot index) and then reset the values of the left and right pointers, in order to find the solution in O(log N) time we just search the half of the array that includes our target value
- The if-else statement checks to see if the target value is in the beginning half or the upper half of the array and sets the left/right pointer accordingly to the pivot index 
- After this, we simply do a normal binary search algorithm, which we further optimize by setting the left/right pointers equal to before/after the midpoint to reduce the # of iterations 
