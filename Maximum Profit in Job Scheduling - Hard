We have n jobs, where every job is scheduled to be done from startTime[i] to endTime[i], obtaining a profit of profit[i].
You're given the startTime, endTime and profit arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.
If you choose a job that ends at time X you will be able to start another job that starts at time X.

Example 1:
Input: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]
Output: 120
Explanation: The subset chosen is the first and fourth job. 
Time range [1-3]+[3-6] , we get profit of 120 = 50 + 70.

Example 2:
Input: startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]
Output: 150
Explanation: The subset chosen is the first, fourth and fifth job. 
Profit obtained 150 = 20 + 70 + 60.

Example 3:
Input: startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]
Output: 6
 
Constraints:
1 <= startTime.length == endTime.length == profit.length <= 5 * 104
1 <= startTime[i] < endTime[i] <= 109
1 <= profit[i] <= 104

Code: 51 ms| Beats 50%| Time Complexity: O(n log n) | Space Complexity: O(n)
class Solution {
    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        int n = startTime.length; 
        int[][] jobs = new int[n][3];

        for (int i = 0; i < n; i++){
            jobs[i][0] = startTime[i];
            jobs[i][1] = endTime[i];
            jobs[i][2] = profit[i];
        }

        Arrays.sort(jobs, (a,b) -> a[1] - b[1]);
        TreeMap<Integer, Integer> dp = new TreeMap<>();
        dp.put(0,0);

        for (int[] job: jobs){
            int curr = dp.floorEntry(job[0]).getValue() + job[2];

            if (curr > dp.lastEntry().getValue()){
                dp.put(job[1], curr);
            }
        }
        return dp.lastEntry().getValue();
    }
}

Code Explanation: 
- In this problem, we want to use dynamic programming because we want to split this up into a bunch of small problems and solve those to come up with a big solution 
- We start by initializing a 2d array that will take in the values of each job, including its start time, end time, and profit
- After we have this, we want to sort this by the end time of the jobs, so when we do our processing we ensure that jobs don't overlap and we process them correctly
- Now, we want to use a treemap in this case because we need to store the endTime value as well as the profit associated with that job (treeMaps maintain an ascending order sort)
- We initialize the treemap to 0 and begin our for loop of the 2d array we previously created 
- In this loop, we create a variable that retrieves the last entry in the map that is less than or equal to the start time of the new job(ensuring no overlaps) and we add the current job's profit to this
- This will effectively give us a variable that took the last possible job that we could complete before the current job, retrieve its profit, and add the current profit to it 
- Once we have this, we evaluate if it's greater than the last entry into the TreeMap, since every time we process we're effectively doing the equivalent of profit = Math.max(profit, curr), and so we add the end time and the new profit to the map
- Once this loop terminates, we know that the last value in the map will have the max profit, so we call dp.lastEntry()
