There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.

Example 1:
Input: m = 3, n = 7
Output: 28

Example 2:
Input: m = 3, n = 2
Output: 3
Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down
 
Constraints:
1 <= m, n <= 100

Code: 0ms | Beats 100%
class Solution {
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];

        for (int i = 0; i < m; i++){
            for (int j = 0; j < n; j++){
                if (i == 0 || j == 0){
                    dp[i][j] = 1;
                }else {
                    dp[i][j] = dp[i-1][j] + dp[i][j-1];
                }
            }
        }
        return dp[m-1][n-1]; 
    }
}

Code Explanation: 
- Pretty simple dynamic programming problem where we split each cell's value for # of unique paths into subproblems and compile them on top of one another 
- We start by initializing our dp array and creating a nested for loop to iterate through the 2d array
- Within this array, we have a condition for when i == 0 || j == 0, which essentially handles the border cases, when there is only one unique path since the problem states you can only go right or down. 
- If this first boundary case is not met, then we know the cell is in the middle and would just be derived from its neighboring cells unique paths added up, so we calculate that and append it to this cell 
- Once this loop terminates, we return the last cell of the dp array signifying the # of unique paths for the bottom right cell (aka the finish line) 
