Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
There is only one repeated number in nums, return this repeated number.
You must solve the problem without modifying the array nums and using only constant extra space.

Example 1:
Input: nums = [1,3,4,2,2]
Output: 2

Example 2:
Input: nums = [3,1,3,4,2]
Output: 3

Example 3:
Input: nums = [3,3,3,3,3]
Output: 3
 
Constraints:
1 <= n <= 105
nums.length == n + 1
1 <= nums[i] <= n
All the integers in nums appear only once except for precisely one integer which appears two or more times.

Code: Beats 88.36% Time Complexity: O(n)
class Solution {
    public int findDuplicate(int[] nums) {
        int slow = nums[0];
        int fast = nums[0];

        while (true){
            slow = nums[slow];
            fast = nums[nums[fast]];
            if (slow == fast){
                break; 
            }
        }
        slow = nums[0];
        while (slow != fast){
            slow = nums[slow];
            fast = nums[fast];
        }

        return slow;
    }
}

Code Explanation: 
- For this problem, we need to find the duplicate with constant space, which leads us to treat this as a linkedList problem. Essentially each index is a node that points to another since we are guranteed that all numbers are [1..n] inclusive and theres n+1 numbers total. ex [1,3,0,2] nums[0] = 1 -> so we go to index 1 one next 
- Treating it like a linked list we essentially want to find the cycle and find where it begins
- Start by creating a fast and slow pointer and stopping the loop when they first intersect. The fast moves at 2x speed of the slow so when they meet we know that there is a cycle but the fast pointer has travelled double the distance of slow, keep in mind they can intersect at any point within the cycle but we need to find where the cycle starts. 
- Based on this, we can reset the slow pointer to the beginning and we know that when fast and slow meet again fast will have now gone around the cycle one WHOLE time since it originally travelled double the distance of slow, this essentially travelling that distance again to get us to the beginning of the cycle
- Then we just return accordingly
- The time complexity is O(n) because at most we loop through the array once and everything done is in place so space complexity remains the same
