You are given a stream of points on the X-Y plane. Design an algorithm that:

Adds new points from the stream into a data structure. Duplicate points are allowed and should be treated as different points.
Given a query point, counts the number of ways to choose three points from the data structure such that the three points and the query point form an axis-aligned square with positive area. An axis-aligned square is a square whose edges are all the same length and are either parallel or perpendicular to the x-axis and y-axis.

Implement the DetectSquares class:
DetectSquares() Initializes the object with an empty data structure.
void add(int[] point) Adds a new point point = [x, y] to the data structure.
int count(int[] point) Counts the number of ways to form axis-aligned squares with point point = [x, y] as described above.
 
Example 1:
Input
["DetectSquares", "add", "add", "add", "count", "count", "add", "count"]
[[], [[3, 10]], [[11, 2]], [[3, 2]], [[11, 10]], [[14, 8]], [[11, 2]], [[11, 10]]]
Output
[null, null, null, null, 1, 0, null, 2]

Explanation
DetectSquares detectSquares = new DetectSquares();
detectSquares.add([3, 10]);
detectSquares.add([11, 2]);
detectSquares.add([3, 2]);
detectSquares.count([11, 10]); // return 1. You can choose:
                               //   - The first, second, and third points
detectSquares.count([14, 8]);  // return 0. The query point cannot form a square with any points in the data structure.
detectSquares.add([11, 2]);    // Adding duplicate points is allowed.
detectSquares.count([11, 10]); // return 2. You can choose:
                               //   - The first, second, and third points
                               //   - The first, third, and fourth points

Constraints:

point.length == 2
0 <= x, y <= 1000
At most 3000 calls in total will be made to add and count.

Code: Beats 23.42% Time Complexity: O(N)
class DetectSquares {
    Map<String, Integer> map; 
    List<int[]> points; 
    public DetectSquares() {
        this.map = new HashMap<>();
        this.points = new ArrayList<>();
    }
    
    public void add(int[] point) {
        String key = point[0] + "," + point[1];
        map.put(key, map.getOrDefault(key, 0) + 1);
        points.add(point);
    }
    
    public int count(int[] point) {
        int count = 0; 
        int px = point[0], py = point[1]; 
        for (int[] pts: points){
            int x = pts[0], y = pts[1];
            if (Math.abs(py - y) != Math.abs(px - x) || px == x || py == y){
                continue; 
            }

            String topLeft = x + "," + py; 
            String bottomRight = px + "," + y; 

            count += map.getOrDefault(topLeft, 0) * map.getOrDefault(bottomRight, 0);
        }

        return count;
    }
}

Code Explanation: 
- For this problem, we are trying to find how many different squares we can make based on a starting point. Keep in mind that multiple "points" can have the same coordinates but are classified as other points, so if we have a square where one corner is present twice, then we can make that square two times 
- Due to this, we want to create a hashmap that keeps track of the count for each coordinate. We also want to create a list that keeps track of coordinate 
- The intuition here is that, instead of iterating through every edge and checking if we can make a square by checking if the other edges combined make a square, which is O(n^3), we can iterate through all the points once and find the point that is diagonal. 
- A point is the diagonal point if its distances in terms of X and in terms of Y are equal. We want to find this point and then, based on thi,s check for the presence of the topLeft corner point and the bottomRight corner point
- If these points exists, then we know we have a square. we want to add based on the count of these points because if we have multiple of the same, then its classified as different squares. Say, for instance, the topLeft corner point count is 2 and the bottomRight corner point count is 2, then we know we will have 4 different squares with all these possible combinations
- Based on these, we essentially iterate through to find a diagonal point, check if the corner points exist, retrieve their count, and multiply them together to get the cumulative amount of squares that can be made
- The reason that we don't do this for the diagonal corner is that if it has a duplicate value, we will iterate through it at some point and will recount it later on 
- Since we run through all the points only once and use a HashMap for efficient lookup, our time complexity is O(n) 
