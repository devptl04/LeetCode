Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.
You must write an algorithm that runs in O(log n) time.


Example 1:
Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.

Example 2:
Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.

Example 3:
Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times. 
 
Constraints:

n == nums.length
1 <= n <= 5000
-5000 <= nums[i] <= 5000
All the integers of nums are unique.
nums is sorted and rotated between 1 and n times.

Code: 0ms | Beats 100% | Time Complexity: O(log n)
class Solution {
    public int findMin(int[] nums) {
        int left = 0;
        int right = nums.length - 1;
        while (left < right){
            int mid = left + (right - left) / 2;
            if (nums[mid] > nums[right]){
                left = mid + 1; 
            }else {
                right = mid; 
            }
        }
        return nums[left]; 
    }
}

Code Explanation: 
- We know we wanted to binary search here since we want to have a run time of O(log n)
- We therefore create a pointer for the back and front of the array and create a mid variable
- With this mid variable, if its greater than the variable one the far right (then we know that this variable was rotated since we're suppsoed to be ascending order) 
- Given this, we move the left pointer to mid + 1 otherwise we know that it was a normal unrotated point and we can move our search down by decrementing the right pointer to mid (since we cannot leave mid out) 
- Once this loop terminates, the rotated index is equal to left and we return the value within the array 
