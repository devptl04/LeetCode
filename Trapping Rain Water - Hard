Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Example 1:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

Example 2:
Input: height = [4,2,0,3,2,5]
Output: 9
 
Constraints:
n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105

Code: 0ms | Beats 100%
class Solution {
    public int trap(int[] height) {
        int total = 0;
        int left = 0; 
        int right = height.length - 1; 
        int maxLeft = 0;
        int maxRight = 0; 
        while (left < right){
            if (height[left] < height[right]){
                if (height[left] > maxLeft){
                    maxLeft = height[left];
                }else{
                    total += maxLeft - height[left];
                }
                left++;
            }else {
                if (height[right] > maxRight){
                    maxRight = height[right];
                }else{
                    total += maxRight - height[right];
                }
                right--;
            }
        }
        return total; 
    }
}

Code Explanation: 
- In this problem, we want to use two pointers as we are looking to find the left and right heights that will allow us to store water at a given interval 
- We initialize a left and right pointer as well as a left and right max variable
- While the left is less than the right if the height of the left is less than the right, then we know that the left side is the prohibiting factor from us adding more water so we process this side of the array
Now if the current left height is greater than the max left height then we simply just change the max left height and increment the left pointer, we don't add here since the current pointer wouldn't have a left wall to store water
- If it's not the max left height then we know we can store water in it because it has a left and a right wall, so we add to the total by the difference of the current by the max height of the left wall (giving us how much water can be in filled at this point) 
- We do the same exact thing on the right side and decrement the pointer applying the same logic 
- After this while loop terminates, we have successfully found the total amount of rain water based on elevation
