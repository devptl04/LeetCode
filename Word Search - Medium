Given an m x n grid of characters board and a string word, return true if word exists in the grid.
The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

Example 1:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true

Example 2:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
Output: true

Example 3:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"
Output: false
 
Constraints:
m == board.length
n = board[i].length
1 <= m, n <= 6
1 <= word.length <= 15
board and word consists of only lowercase and uppercase English letters.

Code: 101ms | Beats 95%
class Solution {
    public boolean exist(char[][] board, String word) {
        char begin = word.charAt(0);
        for (int i = 0; i < board.length; i++){
            for (int j = 0; j < board[i].length;j++){
                if (board[i][j] == begin){
                    if (search(board, word.toCharArray(), i, j, 0)){
                        return true; 
                    }
                }
            }
        }
        return false; 
    }

    public boolean search(char[][] board, char[] word, int i, int j, int wordIdx){
        if (wordIdx == word.length){return true;}
        if (i < 0 || j < 0 || i >= board.length || j >= board[i].length || board[i][j] != word[wordIdx]){
            return false; 
        }

        char hold = board[i][j]; 
        board[i][j] = '#';

        boolean found = (search(board, word, i + 1, j, wordIdx + 1) ||
        search(board, word, i - 1, j, wordIdx + 1) ||
        search(board, word, i, j + 1, wordIdx + 1) ||
        search(board, word, i, j - 1, wordIdx + 1));

        board[i][j] = hold; 
        return found; 
    }
}

Code Explanation: 
- My logic here is that we iterate through the board and if we run into the first letter of the String then we call to a search method that will tell us if the word can be constructed from that index onward
- We iterate through the board and call to this search method that takes in the board, the word (as a char array to make it easier), the current indexes, and a word index (so we know what word we are on) 
- Within this method, we want to check if the word index is equal to the char array to check if our word is found 
- After this, we do our boundary checks and check if the current index on the board is equal to the Character we are looking for 
- Since we recursively call this method over and over again in each direction to search for the word, we need placeholders for the visited spots, so we don't count them twice, so we take the value of the current location and set it equal to a placeholder while we iterate through the board
- Here we set a variable equal to the recursive calls of the up, down, left, & right calls because once we search the board, we have to restore the board to its original state.
- So after these recursively calls are run, we set the value back and return the variable, which will successfully tell us if the word has been found 
