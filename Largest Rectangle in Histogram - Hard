Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.

Example 1:
Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.

Example 2:
Input: heights = [2,4]
Output: 4
 
Constraints:
1 <= heights.length <= 105
0 <= heights[i] <= 104

Code: 81ms | Beats 83.43% | Time & Space Complexity: O(n)
class Solution {
    public int largestRectangleArea(int[] heights) {
        int maxArea = 0;
        Stack<int[]> stack = new Stack<>();

        for (int i = 0; i < heights.length; i++){
            int start = i;
            while (!stack.isEmpty() && stack.peek()[1] > heights[i]){
                int[] curr = stack.pop();
                int height = curr[1];
                int index = curr[0];
                maxArea = Math.max(maxArea, height * (i - index));
                start = index; 
            }
            stack.push(new int[]{start, heights[i]});
        }

        for (int [] curr : stack){
            int height = curr[1];
            int index = curr[0];
            maxArea = Math.max(maxArea, height * (heights.length - index));
        }
        return maxArea;
    }
}

Code Explanation: 
- For this problem, we utilize a stack, so we can keep tracking the most recent heights and access them accordingly as we iterate through the histogram 
- We initialize a maxArea variable and a stack, which will hold an array representing the (index, height) of that bar/area
- As we iterate through the histogram, we set the start variable to i and have a while loop that checks if the stack's top element has a height greater than the current
- If it does then we have to remove this and calculate the area based on this and append it to the stack accordingly
- Since, there can be multiple previous bars with greater heights this loop keeps going, and uses the start index to appropriately add to the new area/rectangle to the stack
- Once this loop terminates, the stack still has the values of rectangles who's heights go all the way through the histogram, so we have to calculate those
- After this terminates, we can return the maxArea
