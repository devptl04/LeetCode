Multiply Strings

Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.
Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.

Example 1:
Input: num1 = "2", num2 = "3"
Output: "6"

Example 2:
Input: num1 = "123", num2 = "456"
Output: "56088"
 
Constraints:
1 <= num1.length, num2.length <= 200
num1 and num2 consist of digits only.
Both num1 and num2 do not contain any leading zero, except the number 0 itself.

Code: Beats 97% Time complexity: O(n * m)
class Solution {
    public String multiply(String num1, String num2) {
        int m = num1.length();
        int n = num2.length();
        int[] result = new int[m + n];

        for (int i = m -1; i>=0; i--){
            int a = num1.charAt(i) - '0';
            for (int j = n-1; j >= 0; j--){
                int b = num2.charAt(j) - '0';
                int mult = a * b; 
                int sum = mult + result[i + j + 1];

                result[i + j + 1] = sum % 10; 
                result[i + j] += sum/10; 
            }
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < result.length; i++){
            if (!(sb.length() == 0 && result[i] == 0)){
                sb.append(result[i]);
            }
        }

        return sb.toString(); 
    }
}


Explanation: 
- For this problem, we aren't allowed to use Integer parse int, so we utilize an array to keep track of all the values. We initialize this array to be of size n + m because when we multiply two numbers, this is the maximum size that can be created in terms of the digit length
- We then iterate through the back of both strings and multiply the two numbers together 
- The intuition here is that when we multiply two numbers, we can end up having a ones and tens digit (ex. 10). So we want to access the value in the previous one's digit (which stands for the carry) and add it to the sum. This effectively tells us the sum of the current digits being multiplied while factoring in potential carry digits
- We need to initialize the ones place and add the carry equal to the current index 
- After this loop runs, we will have found the product, but we need to check for leading 0s and create the string, so we loop through accordingly
