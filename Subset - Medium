Given an integer array nums of unique elements, return all possible 
subsets(the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

Example 1:
Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

Example 2:
Input: nums = [0]
Output: [[],[0]]
 
Constraints:
1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.

Code: 0ms | Beats 100%
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(nums, result, new ArrayList<>(), 0);
        return result; 
    }

    public void backtrack(int[] nums, List<List<Integer>> result, ArrayList<Integer> curr, int index){
        result.add(new ArrayList<>(curr));
        for (int i = index;  i < nums.length; i++){
            curr.add(nums[i]);
            backtrack(nums, result, curr, i+1);
            curr.remove(curr.size() - 1);
        }
    }
}

Code Explanation: 
- This is a backtracking problem as we are dealing with combinations
- We first intialize the return data structure and call it into a backtracking helper method
- This method takes in the input array, the return list, a new list (current list) , and an index 
- Every time this function runs we add the curr list to the result
- We use the backtracking algorithm within the for loop where we set i = index and add that nums[i] to the curr list. When we recursively call the backtrack function again iterating through the indexes, we are going through the possible options remaining for the curr to branch to 
- After this returns back, we remove the last index and repeat through, effectively giving us all the possible combinations 
