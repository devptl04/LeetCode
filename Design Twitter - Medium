Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.

Implement the Twitter class:
Twitter() Initializes your twitter object.
void postTweet(int userId, int tweetId) Composes a new tweet with ID tweetId by the user userId. Each call to this function will be made with a unique tweetId.
List<Integer> getNewsFeed(int userId) Retrieves the 10 most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.
void follow(int followerId, int followeeId) The user with ID followerId started following the user with ID followeeId.
void unfollow(int followerId, int followeeId) The user with ID followerId started unfollowing the user with ID followeeId.
 

Example 1:
Input
["Twitter", "postTweet", "getNewsFeed", "follow", "postTweet", "getNewsFeed", "unfollow", "getNewsFeed"]
[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]
Output
[null, null, [5], null, null, [6, 5], null, [5]]

Explanation
Twitter twitter = new Twitter();
twitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).
twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5]. return [5]
twitter.follow(1, 2);    // User 1 follows user 2.
twitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).
twitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.
twitter.unfollow(1, 2);  // User 1 unfollows user 2.
twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2.
 

Constraints:
1 <= userId, followerId, followeeId <= 500
0 <= tweetId <= 104
All the tweets have unique IDs.
At most 3 * 104 calls will be made to postTweet, getNewsFeed, follow, and unfollow.
A user cannot follow himself.

Code: Beats 76.77% Time Complexity: O(n log n) Space Complexity: O(n)
class Tweet {
    int tweetId;
    int timeStamp;

    public Tweet(int tweetId, int timeStamp){
        this.tweetId = tweetId;
        this.timeStamp = timeStamp; 
    }
}

class Twitter {
    HashMap<Integer, List<Tweet>> tweetsMap = new HashMap<>();
    HashMap<Integer, Set<Integer>> followersMap = new HashMap<>();
    int time = 0; 
    public Twitter() {
        
    }
    
    public void postTweet(int userId, int tweetId) {
        tweetsMap.putIfAbsent(userId, new ArrayList<>());
        tweetsMap.get(userId).add(new Tweet(tweetId, time++));
    }
    
    public List<Integer> getNewsFeed(int userId) {
        PriorityQueue<Tweet> maxHeap = new PriorityQueue<>((a,b) -> b.timeStamp - a.timeStamp);
        if (tweetsMap.containsKey(userId)){
            maxHeap.addAll(tweetsMap.get(userId));
        }

        for (int id: followersMap.getOrDefault(userId, new HashSet<>())){
            if (tweetsMap.containsKey(id)){
                maxHeap.addAll(tweetsMap.get(id));
            }
        }

        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < 10; i++){
            if (!maxHeap.isEmpty()){
                result.add(maxHeap.remove().tweetId);
            }
        }

        return result; 
    }
    
    public void follow(int followerId, int followeeId) {
        if (followerId == followeeId) return; 
        followersMap.putIfAbsent(followerId, new HashSet<>());
        followersMap.get(followerId).add(followeeId);
    }
    
    public void unfollow(int followerId, int followeeId) {
        if (followerId == followeeId) return; 
        if (followersMap.containsKey(followerId)){
            followersMap.get(followerId).remove(followeeId);
        }
    }
}

Code Explanation: 
- For this problem, we essentially want to recreate the following mechanism of social media, as well as retrieve a live feed in chronological order based on who you are following
- In order to do this, we initialize two maps (One that keeps track of everyone who users follow, and one that keeps track of all the tweets a user posts), and an int to keep track of time 
- We also initialize a tweets class for each tweet, which holds the tweetId as well as a timeStamp, which we can use to determine the chronological order 
- We accordingly add to the tweetsMap and increment the time appropriately
- To figure out the top 10 posts for a user's feed, we first want to initialize a maxHeap, which we sort based on time. This maxHeap will take in all the tweets that a user posts as well as all the tweets that the user's followers have posted
- In order to do this, we first add all the posts the current user has ever posted and add them to the maxHeap. We then iterate through the user's following list (we initialize an empty set to handle null pointer exception cases) and add all to tweets of each respective user to the maxHeap
- We then iterate a total of 10 times and append accordingly to the final feed list and return
- For the following and unfollowing mechanism, we simply check if the user isn't the same as the follower and append accordingly
- This runs in O(n log n) because in the worst case we can add all tweets into the maxHeap which has a time complexity of O(log n) for each item added
