Given the head of a linked list, remove the nth node from the end of the list and return its head.


Example 1:
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Example 2:
Input: head = [1], n = 1
Output: []

Constraints:
The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz


Code: 0ms | Beats 100% | Time Complexity: O(n) & Space Complexity: 0(1)
public ListNode removeNthFromEnd(ListNode head, int n) {
       ListNode dummy = new ListNode(0);
       dummy.next = head; 

       ListNode fast = dummy;
       ListNode slow = dummy;

       for (int i =0; i <= n; i++){
            fast = fast.next; 
       }

       while (fast != null){
        fast = fast.next;
        slow = slow.next; 
       }

       slow.next = slow.next.next; 

       return dummy.next; 

    }
}

Code Explanation: 
- The intuition here is two use two pointers so that we only iterate through the list once and not have to do it twice
- We start by creating a dummy node, in order to handle edge cases when they occur, and intiliaze the head of the dummy to point to the start the linked list
- We then intialize our pointers to point to this dummy node 
- Now the logic here is that we want to move the fast pointer N nodes ahead of the slow, so when the fast pointer reaches the end of the list we know that the slow pointer is right before the nTh to last node
- Now since we initialized the pointers to be a pointer to the head, we have to iterate n + 1 times so that fast is in the correct position
- Once this is done, we simply iterate both through the list until fast reaches the end and then we adjust slow.next to skip the next node and return the head of the list
