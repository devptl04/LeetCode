You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.

Return the length of the longest substring containing the same letter you can get after performing the above operations.

 
Example 1:
Input: s = "ABAB", k = 2
Output: 4
Explanation: Replace the two 'A's with two 'B's or vice versa.

Example 2:
Input: s = "AABABBA", k = 1
Output: 4
Explanation: Replace the one 'A' in the middle with 'B' and form "AABBBBA".
The substring "BBBB" has the longest repeating letters, which is 4.
There may exists other ways to achieve this answer too.
 
Constraints:
1 <= s.length <= 105
s consists of only uppercase English letters.
0 <= k <= s.length


Code: 7ms | Beats 82.17% | Time & Space Complexity: 0(N)
class Solution {
    public int characterReplacement(String s, int k) {
        int[] freq = new int[26];
        int count = 0; 
        int left = 0;
        int result = 0; 

        for (int right = 0; right < s.length(); right++){
            freq[s.charAt(right) - 'A']++;
            count = Math.max(count, freq[s.charAt(right) - 'A']);

            while (right - left + 1 - count > k){
                freq[s.charAt(left) -'A']--;
                left++;
            }
            result = Math.max(result, right - left + 1);
        }

        return result; 
    }
}


Code Explanation: 
- This is a sliding window problem where we want to keep track of the frequency of each character in the current window and based off the length of the window as well as how big K is we need to contract the window accordingly
- We initialize a frequency array to keep track of the number of times we see a variable within the window and also initialize result, count (which holds the most frequent character amount), and left 
- Within a for loop we extend to the window and add the new value to the frequency array, and then check if adding this new value makes it the most frequent character within the current window
- Since count holds the # of the most frequent character occurrences, if the length of the window - count is greater than k then we know that our window is invalid since we would have 1+ character that we cannot convert, thus we have to contract the window from the left side
- After each iteration, we check to see what the longest length and store it in result, and return this value after the loop terminates 
