Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.

Implement the TimeMap class:

TimeMap() Initializes the object of the data structure.
void set(String key, String value, int timestamp) Stores the key key with the value value at the given time timestamp.
String get(String key, int timestamp) Returns a value such that set was called previously, with timestamp_prev <= timestamp. If there are multiple such values, it returns the value associated with the largest timestamp_prev. If there are no values, it returns "".
 

Example 1:
Input
["TimeMap", "set", "get", "get", "set", "get", "get"]
[[], ["foo", "bar", 1], ["foo", 1], ["foo", 3], ["foo", "bar2", 4], ["foo", 4], ["foo", 5]]
Output
[null, null, "bar", "bar", null, "bar2", "bar2"]

Explanation
TimeMap timeMap = new TimeMap();
timeMap.set("foo", "bar", 1);  // store the key "foo" and value "bar" along with timestamp = 1.
timeMap.get("foo", 1);         // return "bar"
timeMap.get("foo", 3);         // return "bar", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is "bar".
timeMap.set("foo", "bar2", 4); // store the key "foo" and value "bar2" along with timestamp = 4.
timeMap.get("foo", 4);         // return "bar2"
timeMap.get("foo", 5);         // return "bar2"
 

Constraints:
1 <= key.length, value.length <= 100
key and value consist of lowercase English letters and digits.
1 <= timestamp <= 107
All the timestamps timestamp of set are strictly increasing.
At most 2 * 105 calls will be made to set and get.

Notes:
  Input Data:
    - Key value strings are lowercase 
    - Set operations will always have strictly increasing timestamps 


Code: 132ms | Beats 89/67%
class TimeMap {
    private Map<String, List<Data>> map;
    public TimeMap() {
        this.map = new HashMap<>();
    }
    
    public void set(String key, String value, int timestamp) {
        if (!map.containsKey(key)){map.put(key, new ArrayList<>());}
        map.get(key).add(new Data(value, timestamp));
    }
    
    public String get(String key, int timestamp) {
        if (!map.containsKey(key)) return "";
        List<Data> data = map.get(key);
        return findClosestVal(data, timestamp); 
    }

    private String findClosestVal(List<Data> data, int timestamp){
        int left = 0; 
        int right = data.size() -1;
        while (left < right){
            int mid = (left + right + 1) /2;
            if (data.get(mid).timestamp <= timestamp) left = mid; 
            else right = mid -1; 
        }
        Data closest = data.get(left);
        return closest.timestamp > timestamp ? "" : closest.value;
    }

    class Data{
        private String value; 
        private int timestamp;

        public Data(String key, int timestamp){
            this.value = key;
            this.timestamp = timestamp; 
        }
    }
}


Code Walkthrough/Explanation: 
- Since we know that we are dealing with key and values, we know that our main data structure is going to be a HashMap
- Each key of the map is linked to a list of both a timestamp and a value, so we initialize a new class that stores a value and a timestamp (making this a list in as the value in the hashmap)
- For the set function, we first check if the key is already in the map, if not we simply create a "slot" for the values and append them 
- As for the get function, we check to see if the key is even in the map-if not we return an empty string. Then initialize a list to the key's value and send this list and the timestamp into  a helper method function we create 
- In this helper method, we do an optimized binary search to find where the highest neighboring timestamp is and return this-however in the return we check for a base case instance where all the timestamps in the list are greater than the input timestamp
