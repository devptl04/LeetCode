Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

Example 1:
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

Example 2:
Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.
 
Constraints:
3 <= nums.length <= 3000
-105 <= nums[i] <= 105

Code: Beats 69.87% Time Complexity: O(n^2)
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i++){
            if (i > 0 && nums[i] == nums[i-1]) continue; 
            int b = i + 1; 
            int c = nums.length - 1; 
            while (b < c){
                int sum = nums[i] + nums[b] + nums[c];
                if (sum == 0){
                    result.add(Arrays.asList(nums[i], nums[b], nums[c]));

                    while ((b < c) && nums[b] == nums[b+1]) b++;
                    while ((b < c) && nums[c] == nums[c-1]) c--;

                    b++;
                    c--;
                }else if (sum > 0){
                    c--;
                }else{
                    b++;
                }
            }
        }

        return result; 
    }
}

Code Explanation: 
- For this problem, we want to find unique instances of 3 numbers that add up to a sum of 0. To do this efficiently, we want to sort the array, so we can guide our pointers in the right direction based on the calculated sum. 
- After we do this, we want to initialize 3 pointers, the first one will be set up through a conventional for loop through the array, and to optimize the runtime, we don't want to calculate with repeated values for pointers. So, we check to see if the i pointer is a duplicate and skip it accordingly
- We then initialize a second pointer that is right after i and a pointer at the end of the array. 
- Then we essentially run binary search using these b and c pointers and guide them accordingly
- If we find an answer, we add it to the result and then use a while loop to prevent having duplicate pointer values 
- Once this binary search is done, we increment i and repeat the whole process over again
- In the worst case, these two pointers traverse the entire array O(n) within the already defined for loop that is O(n), thus the time complexity is O(n^2) 
