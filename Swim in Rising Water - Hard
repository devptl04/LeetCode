You are given an n x n integer matrix grid where each value grid[i][j] represents the elevation at that point (i, j).
The rain starts to fall. At time t, the depth of the water everywhere is t. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most t. You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.
Return the least time until you can reach the bottom right square (n - 1, n - 1) if you start at the top left square (0, 0).

Example 1:
Input: grid = [[0,2],[1,3]]
Output: 3
Explanation:
At time 0, you are in grid location (0, 0).
You cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.
You cannot reach point (1, 1) until time 3.
When the depth of water is 3, we can swim anywhere inside the grid.

Example 2:
Input: grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]
Output: 16
Explanation: The final route is shown.
We need to wait until time 16 so that (0, 0) and (4, 4) are connected.
 
Constraints:
n == grid.length
n == grid[i].length
1 <= n <= 50
0 <= grid[i][j] < n2
Each value grid[i][j] is unique.

Code: Beats 85.46% Time Complexity: O(N^2 log N) 
class Solution {
    public int swimInWater(int[][] grid) {
        int n = grid.length; 
        boolean[][] visited = new boolean[n][n];
        PriorityQueue<int[]> minHeap = new PriorityQueue<>((a,b) -> a[0] - b[0]);

        minHeap.add(new int[]{grid[0][0], 0, 0});
        visited[0][0] = true; 

        int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};

        while (!minHeap.isEmpty()){
            int[] current = minHeap.remove();
            int time = current[0];
            int row = current[1];
            int col = current[2];

            if (row == n -1 && col == n -1) return time; 
            for (int[] dir: directions){
                int newRow = row + dir[0];
                int newCol = col + dir[1];

                if (newRow >= 0 && newCol >= 0 && newRow < n && newCol < n && !visited[newRow][newCol]){
                    visited[newRow][newCol] = true; 
                    minHeap.add(new int[]{Math.max(time, grid[newRow][newCol]), newRow, newCol});
                }
            }
        }

        return -1; 
    }
}

Code Explanation: 
- In this problem, we are essentially finding the smallest Max value path to the end node, so we use a modified Dijkstra's algorithm (algorithm to find the shortest path from a source node to all other nodes w non-negative weights) 
- We want to create a minHeap and iterate through the grid, adding each value from the lowest point it can be reached. The minHeap contains (time, row Index, col Index), and so when row and col both equal N-1, we know we've reached the end and can return the current time
- We make a visited array to track the cells that we've calculated for and sort the minHeap by the time, adding the first element to it as well 
- While the minHeap isn't empty, we check the neighbors of the current cell, check if they are in bounds and not already calculated
- We then make sure to update the visited array and also calculate the current max for this new cell, meaning we check the neighbor value with the current cell to find the "max" for this path
- The time complexity is O(n^2 log n) because the grid is size N X N and we input all of these values into a minHeap which takes 0 (log N) time 
