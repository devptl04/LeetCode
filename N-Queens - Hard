The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.
Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.
Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

Example 1:
Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above

Example 2:
Input: n = 1
Output: [["Q"]]
 
Constraints:
1 <= n <= 9

Code: Beats: 88.97% Time Complexity: O(n!)
class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> result = new ArrayList<>();
        char[][] board = new char[n][n];
        for (int i = 0; i < n; i++){
            Arrays.fill(board[i], '.');
        }
        backtrack(n, result, board, 0);
        return result; 
    }

    public void backtrack(int n, List<List<String>> result, char[][] board, int row){
        if (row == n){
            result.add(construct(board));
        }

        for (int col = 0; col < n; col++){
            if (isValid(row, col, board, n)){
                board[row][col] = 'Q';
                backtrack(n, result, board, row + 1);
                board[row][col] = '.';
            }
        }
    }

    public boolean isValid(int row, int col, char[][] board, int n){
        for (int i = 0; i < row; i++){
            if (board[i][col] == 'Q'){
                return false; 
            }
        }

        for (int i = row -1, j = col -1; i >=0 && j >=0; i--, j--){
            if (board[i][j] == 'Q') return false; 
        }
        for (int i = row - 1, j = col + 1; i >=0 && j < n; i--, j++){
            if (board[i][j] == 'Q') return false;
        }

        return true; 
    }
    
    public List<String> construct(char[][] board){
        List<String> result = new ArrayList<>();
        for (char[] curr: board){
            result.add(new String(curr));
        }

        return result; 
    }
}

Code Explanation
- For this question, we are trying to find the total combinations of placing N queens on NxN grid. The intuition here is that we need to backtrack while iterating row by row and check if the the current Queen placement is valid until we calculate all possibilites
- A queen is valid if its not attacking another queen, so Queens cannot be placed 4 directionally or diagonally across from one another
- We create a results list to hold all our possible combinations, and create a "board" filled with . to signify empty spots. We then pass this into the backtrack function and return accordingly
- Our base case in the backtrack function is when we have processed all rows, meaning we've succesfully placed N queens. When this is met, we construct a String of the board and add it to our result
- If not, we want to iterate through each possible column to check for all possibilties, so we make the current cell into a Queen and call this to a function to check if the placement is valid
- Within this isValid helper function, we iterate through the current column to make sure no rows have a Queen, and then we iterate through the top left diagonal and top right diagonal respectively. The reason we don't check the bottom diagonals is because we are iterating row by row, so it is not possible for there to be a queen below the current processing point
- If isValid returns True then we know the Queen placement in that column is valid and we recurse to the next row, and then ultimatley backtrack by removing the current Queen in the call stack and trying every other column
- Within this construct function, we want to create the board into a list of Strings, so we iterate row by row, and create a new String accordingly
