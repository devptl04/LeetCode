Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.
The algorithm for myAtoi(string s) is as follows:

Whitespace: Ignore any leading whitespace (" ").
Signedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity is neither present.
Conversion: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.
Rounding: If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then round the integer to remain in the range. Specifically, integers less than -231 should be rounded to -231, and integers greater than 231 - 1 should be rounded to 231 - 1.
Return the integer as the final result.


Example 1:
Input: s = "42"
Output: 42
Explanation:
The underlined characters are what is read in and the caret is the current reader position.
Step 1: "42" (no characters read because there is no leading whitespace)     
Step 2: "42" (no characters read because there is neither a '-' nor '+') 
Step 3: "42" ("42" is read in)  

Example 2:
Input: s = " -042"
Output: -42
Explanation:
Step 1: "   -042" (leading whitespace is read and ignored)
Step 2: "   -042" ('-' is read, so the result should be negative)
Step 3: "   -042" ("042" is read in, leading zeros ignored in the result)

Constraints:

0 <= s.length <= 200
s consists of English letters (lower-case and upper-case), digits (0-9), ' ', '+', '-', and '.'.

Code: 1ms | Beats 100%
class Solution {
    public int myAtoi(String s) {
        int result = 0;
        boolean neg = false;
        boolean started = false;  

        for (char curr : s.trim().toCharArray()) {
            if (curr == '-' && !started) {
                neg = true;
                started = true;
                continue;
            }
            if (curr == '+' && !started) {
                started = true;
                continue;
            }
            if (Character.isDigit(curr)) {
                started = true;
                int digit = curr - '0';
                // Check for overflow
                if (result > (Integer.MAX_VALUE - digit) / 10) {
                    return neg ? Integer.MIN_VALUE : Integer.MAX_VALUE;
                }
                result = result * 10 + digit;
            } else {
                break;  
            }
        }

        if (neg) {
            result = -result;
        }
        return result;
    }
}

Code Explanation: 
- We want to intialize a result variable that we append to through the loop and we create a boolean variable to check for the negative case and a started variable to check for if the number has started to get iterated through in the string
- Within the loop condition, we trim, elimating whitespace, and transform the string into a char array
-We have a checks for pos. & neg. and within the digit condition, we check if the number would be greater than the MAX_VALUE for an integer (we divide by 10 to ensure that when we multiply result by 10 to append the new digit that this value doesn't exceed the boundary
-If it does we return either the max or min integer value 
-Lastly once the loop terminates we check if the number is neg. and return accordingly
