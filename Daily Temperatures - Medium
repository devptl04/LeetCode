Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.

 
Example 1:

Input: temperatures = [73,74,75,71,69,72,76,73]
Output: [1,1,4,2,1,1,0,0]
Example 2:

Input: temperatures = [30,40,50,60]
Output: [1,1,1,0]
Example 3:

Input: temperatures = [30,60,90]
Output: [1,1,0]
 

Constraints:

1 <= temperatures.length <= 105
30 <= temperatures[i] <= 100

Code: 63ms | Beats 61.03% | Time Complexity: 0(n)
class Solution {
    public int[] dailyTemperatures(int[] temperatures) {
        int[] result = new int[temperatures.length];
        Stack<Integer> stack = new Stack<>();

        for (int i = 0; i < temperatures.length; i++){
            while (!stack.isEmpty() && temperatures[i] > temperatures[stack.peek()]){
                int prevIdx = stack.pop();
                result[prevIdx] = i - prevIdx;
            }
            stack.add(i);
        }

        return result; 
    }
}


Code Explanation:
- For this problem, we want to use a stack that stores the index of the values that we still need to find a higher day for and iterate through each value in the array and check if its higher
- If this current value is higher than stack.peek() then we know that we can calculate the number the current index - the previous to get the number of days we want to append to the result array and the previous index. 
- Once this while loop terminates, we add the current value to the stack
- After both loops finish terminating, we simply return the result 
