You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.


Example 1:
Input: nums = [2,3,2]
Output: 3
Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.

Example 2:
Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.

Example 3:
Input: nums = [1,2,3]
Output: 3
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 1000

Code: 0ms| Beats 100% | Time Complexity: 0(N)
class Solution {
    public int rob(int[] nums) {
        if (nums.length == 1) return nums[0];
        if (nums.length == 2) return Math.max(nums[0], nums[1]);

        return Math.max(helper(nums, 0, nums.length - 2), helper(nums, 1, nums.length -1));
    }

    public int helper(int[] nums, int start, int end){
        int prev1 = 0;
        int prev2 = 0;
        for (int i = start; i <= end; i++){
            int curr = Math.max(prev1, prev2 + nums[i]);
            prev2 = prev1; 
            prev1 = curr; 
        }
        return prev1; 
    }
}

Code Explanation: 
- For this problem, we essentially have two cases, one where we rob the first house, so we can't rob it's neighbor, which wraps all the way around, and another case where we rob the second house and thus can rob the very last house in the array as well
- In order to combat the circular manner of the houses, we simply split the problem into two subproblems that are solved linearly and we return the max of that (the subproblems being mentioned above)
- We first check the base cases and then call both subproblems into a helper method that solves the problem linearly
- We use pointers to address the values of the two instances of houses that can be robbed and append/increment them accordingly until we return the first pointer
