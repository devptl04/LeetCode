Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.
You must implement a solution with a linear runtime complexity and use only constant extra space.

Code: Beats 100% Time Complexity: O(n) 
class Solution {
    public int singleNumber(int[] nums) {
        int result = 0;
        for (int i: nums){
            result ^= i; 
        }

        return result;
    }
}

Code Explanation: 
- We know that every number appears twice except one. The XOR operation will result in 0 if the same number is used, ex 2 and 2 (0010) & (0010) would be (0000) 
-XOR is commutative and associative, meaning the order of operations doesn't matter, so we can just add all the values together using XOR essentially cancelling out, except the value that was only present once 
