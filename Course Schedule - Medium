There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.
 

Constraints:

1 <= numCourses <= 2000
0 <= prerequisites.length <= 5000
prerequisites[i].length == 2
0 <= ai, bi < numCourses
All the pairs prerequisites[i] are unique.

Code: 3ms | Beats 94.07% 
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < numCourses; i++){
            graph.add(new ArrayList<>());
        }

        for (int[] parts : prerequisites){
            int course = parts[0];
            int pre = parts[1];
            graph.get(pre).add(course);
        }

        int[] visited = new int[numCourses];
        for (int i = 0; i < numCourses; i++){
            if (!dfs(graph, visited, i)){
                return false;
            }
        }

        return true; 
    }

    public boolean dfs(List<List<Integer>> graph, int[] visited, int i){
        if (visited[i] == 1){
            return false; 
        }
        if (visited[i] == 2){
            return true; 
        }
        visited[i] = 1; 
        for (int neighbor: graph.get(i)){
            if (!dfs(graph, visited, neighbor)){
                return false; 
            }
        }
        visited[i] = 2;
        return true; 
    }
}

Code Explanation: 
- For this problem, we are essentially being asked to detect a cycle in a graph (meaning do two nodes point to each other) 
- We initialize our graph, adding an ArrayList for every index of the total # of courses we have to take 
- After this, we want to iterate through for the prereq array and add FOR EVERY PREQ, the list of courses that need that prereq
- Once this is done, we do dfs and iterate by numCourses, checking each time if dfs returns false
- ^^We also initialize a visited array which is passed into the dfs method
- Within this dfs method, check if the current course (i) has been either visited (2) or is being visited(1) and return values accordingly if so
- Otherwise, we iterate through the list of neighbors for the current course (meaning we iterate through the list of courses that are dependent on the prereq course (i)) and call dfs to these and, return false if it's not true
- Once this loop terminates, we have successfully gone through that prereq course (i) and visited all of its neighbors without finding a cycle, so we mark this course as processed by doing visited[i] = 2 and we return true; 
- Once all of this has been processed, we have successfully iterated through the whole graph and checked for cycles
