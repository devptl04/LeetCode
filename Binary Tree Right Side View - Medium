Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

Example 1:
Input: root = [1,2,3,null,5,null,4]
Output: [1,3,4]

Note: Essentially asking for the right most node at each level

Code: 1ms|Beats 66.7%
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if (root == null) return result; 
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while (!queue.isEmpty()){
            int size = queue.size();
            for (int i = 0; i < size; i++){
                TreeNode curr = queue.remove();
                if (i == size -1){
                    result.add(curr.val);
                }
                if (curr.left != null){
                    queue.add(curr.left);
                }
                if (curr.right != null){
                    queue.add(curr.right);
                }
            }
        }
        return result; 
    }
}


Code Explanation: 
- This is a pretty simple problem once you understand what it's asking for
- Since we are traversing level by level we know to do a level order traversal and manipulate the code to our use
- Here we use a queue and append the TreeNode's in level order, but we simply check if its the last index at each level (meaning that it will be the right most value of the level) and append it to our result list
- After this we check each node from the queue to see if it has any children and add them to the queue accordingly
- Once this loop terminates we have succesfully looped through each value in the tree and created a list of the rightmost values at each level in O(n) time
