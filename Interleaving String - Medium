Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.
An interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively, such that:

s = s1 + s2 + ... + sn
t = t1 + t2 + ... + tm
|n - m| <= 1
The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...
Note: a + b is the concatenation of strings a and b.

Example 1:
Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
Output: true
Explanation: One way to obtain s3 is:
Split s1 into s1 = "aa" + "bc" + "c", and s2 into s2 = "dbbc" + "a".
Interleaving the two splits, we get "aa" + "dbbc" + "bc" + "a" + "c" = "aadbbcbcac".
Since s3 can be obtained by interleaving s1 and s2, we return true.

Example 2:
Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
Output: false
Explanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.

Example 3:
Input: s1 = "", s2 = "", s3 = ""
Output: true
 
Constraints:
0 <= s1.length, s2.length <= 100
0 <= s3.length <= 200
s1, s2, and s3 consist of lowercase English letters.

Code: Beats 33.45% Time Complexity: O(n * m)
class Solution {
    HashMap<String, Boolean> map = new HashMap<>();
    public boolean isInterleave(String s1, String s2, String s3) {
        if (s1.length() + s2.length() != s3.length()) return false; 
        return dfs(s1, s2, s3, 0, 0);
    }

    public boolean dfs(String s1, String s2, String s3, int i, int j){
        if (i == s1.length() && j == s2.length()){
            return true; 
        }
        String key = i + "," + j;

        if (map.containsKey(key)){
            return map.get(key);
        }
        if (i < s1.length() && s1.charAt(i) == s3.charAt(i + j) && dfs(s1, s2, s3, i + 1, j)){
            return true;
        }

        if (j < s2.length() && s2.charAt(j) == s3.charAt(i + j) && dfs(s1, s2, s3, i, j + 1)){
            return true;
        }

        map.put(key, false);
        return false;
    }
}

Code Explanation: 
- For this problem, we are trying to find if the strings S1 and S2 can be combined in interleaving fashion to create s3. For this problem we essentially want to iterate through both Strings using a pointer and see if the current pointer matches the current index of S3. If it does then this is a potentially option. The tricky part is when they both can be a potential option, that's when we must simulate choosing both options and try to complete the String. In order to do this, we will run dfs and use memoization caching to give us a more optimal solution
- First we create a HashMap that will store all the visited "routes" and they're associated results. 
- Within our main function, we check to see if both strings combined actually equal the length of s3 and then if they do we call and return a dfs function that starts from the index pointers 0, 0 respectively for s1 and s2
- Within the the dfs function, we know that are base case is when we've reached the end of boht s1 and s2, so when the pointers both reach the end, we know we have correctly made s3 and can return true
- Next we want to create the key for memoization by combining both index pointers and searching if we've already visited this route before, if so we just return. Then we essentially have two options at every point, we can either add the character from s1 or s2, but first we must see if it matches the current character at s3. If it matches then we must check to see if this is the correct route to go, meaning if we choose to add this respective character will it end up creating the s3 string. If so, we simply return up the call stack and return True.
- If we don't go into either check then we know that the current character cannot be an option, so we add it to the map (for caching purposes) and return false
- Since we are caching, we don't have to go through every potential option every time which would be a time complexity of O(2^n) but instead we calculate every option once so time complexity is O(n * m) 
