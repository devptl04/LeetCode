Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.
Note that the same word in the dictionary may be reused multiple times in the segmentation.

Example 1:
Input: s = "leetcode", wordDict = ["leet","code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".

Example 2:
Input: s = "applepenapple", wordDict = ["apple","pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
Note that you are allowed to reuse a dictionary word.

Example 3:
Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: false
 
Constraints:
1 <= s.length <= 300
1 <= wordDict.length <= 1000
1 <= wordDict[i].length <= 20
s and wordDict[i] consist of only lowercase English letters.
All the strings of wordDict are unique.


Code: 3ms | Beats 83% 
class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        int n = s.length(); 
        boolean[] dp = new boolean[n + 1];
        dp[0] = true; 
        int maxLen = 0; 
        for (String string: wordDict){
            maxLen = Math.max(maxLen, string.length());
        }
        for (int i = 0; i <= n; i++){
            for (int j = 0; j < i; j++){
                if (i - j > maxLen){
                    continue; 
                }
                if (dp[j] && wordDict.contains(s.substring(j, i))){
                    dp[i] = true; 
                    break; 
                }
            }
        }
        return dp[n];
    }
}

Code Walkthrough/Explanation: 
- We use dynamic programming for this problem as we solve for subproblems and let those build on top of each other to figure out if the input string is able to be built with only the dictionary of strings 
- We first initialize the dp array to be the size of the input string + 1 because the dp array is 0-based 
- We set the first index of the dp array to be true as it corresponds to an empty string (which will always be included in the array) 
- To solve this problem we use two pointers that iterate through the input string and iteratively check if the substring is in the dictionary of Strings, which is when we adjust the dp array boolean values accordingly. Here is a good representation of that: 

    i
j
Leetcode
01234567

dp:
TFFFFFFFF
012345678

- Since the substring function is exclusive for the ending interval, our dp array and index of the substring will match up
- As we iterate through, we check if dp[j] is true, signifying that there is a word-break and see if the substring of j&i is within the dict, and if it is dp[i] = true. 
- We then return dp[n] as it signifies that the input string can be made out of the dictionary of Strings
- In order to optimize this whole process, we find the max length of the strings from the dictionary and add a check statement within the nested loops that skip the cases where i & j are greater than this maxLen signifying that its not possible for that to be a word.
