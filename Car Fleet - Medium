There are n cars at given miles away from the starting mile 0, traveling to reach the mile target. You are given two integer array position and speed, both of length n, where position[i] is the starting mile of the ith car and speed[i] is the speed of the ith car in miles per hour. A car cannot pass another car, but it can catch up and then travel next to it at the speed of the slower car. A car fleet is a car or cars driving next to each other. The speed of the car fleet is the minimum speed of any car in the fleet.
If a car catches up to a car fleet at the mile target, it will still be considered as part of the car fleet. Return the number of car fleets that will arrive at the destination.

Example 1:
Input: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]
Output: 3
Explanation:
The cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12. The fleet forms at target.
The car starting at 0 (speed 1) does not catch up to any other car, so it is a fleet by itself.
The cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.

Example 2:
Input: target = 10, position = [3], speed = [3]
Output: 1
Explanation:
There is only one car, hence there is only one fleet.

Example 3:
Input: target = 100, position = [0,2,4], speed = [4,2,1]
Output: 1
Explanation:
The cars starting at 0 (speed 4) and 2 (speed 2) become a fleet, meeting each other at 4. The car starting at 4 (speed 1) travels to 5.
Then, the fleet at 4 (speed 2) and the car at position 5 (speed 1) become one fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.

Constraints:
n == position.length == speed.length
1 <= n <= 105
0 < target <= 106
0 <= position[i] < target
All the values of position are unique.
0 < speed[i] <= 106

Code: Beats 57.4% Time Complexity: O(n log n) 
class Solution {
    public int carFleet(int target, int[] position, int[] speed) {
        int n = position.length;
        if (n == 0){
            return 0;
        }

        double [][] track = new double[n][2];
        for (int i = 0; i < n; i++){
            track[i][0] = position[i];
            track[i][1] = (double) (target - position[i]) / speed[i];
        }

        Arrays.sort(track, (a,b) -> Double.compare(b[0], a[0]));

        int fleet = 0;
        double currTime = 0;

        for (double[] curr: track){
            double time = curr[1];
            if (time > currTime){
                fleet++;
                currTime = time; 
            }
        }

        return fleet;
    }
}


Code Explanation: 
- In this problem, we are essentially given a track of cars, where each car is at a certain position moving at a certain speed towards a finish line. Based on the contingency, a car cannot pass another car but rather create a fleet that moves at the speed of the slower car. How many fleets would cross the finish line 
- In order to solve this, we want to create an array that holds both the position of the current car and the time at which it will cross the finish line
- We sort this array based on the position of the car in order to mimic the passing functionality (a car catching up to a car moving at a slower speed) 
- We then iterate through the array and append to a currTime variable, which holds the current time, to get to the finish line. If the car closest to the finish line finishes in 3 seconds and the car in second finishes in 2 seconds, the second car can only catch up to the first. They would be in the same fleet. Now, if a third car finishes in 4 seconds, it wouldn't be able to catch up to this fleet, and thus it would create a new fleet. 
- Every time we find an instance where a car cannot catch up to the current fleet Speed (currTime), we create a new fleet and adjust the new fleet speed accordingly. 
- After this loop resolves, we've successfully calculated all the fleets in O(n log n) time due to sorting 
