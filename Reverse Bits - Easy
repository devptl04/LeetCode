Reverse bits of a given 32 bits unsigned integer.

Note:
Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.
 
Example 1:
Input: n = 00000010100101000001111010011100
Output:    964176192 (00111001011110000010100101000000)
Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.

Code: Beats 100% | Time Complexity: O(1)
public class Solution {
    // you need treat n as an unsigned value
    public int reverseBits(int n) {
        int result = 0;
        for (int i = 0; i < 32; i++){
            int bit = n & 1; 
            result = (result << 1) | bit;
            n >>>= 1; 
        }

        return result;
    }
}

Code Explanation: 
- We basically read the integer from right to left and write them left to right
- We ints are 32 bits, so we iterate 32 times, and we get the LSB of the current N value (either 0 or 1) 
- We need to perform a left shift to our result, basically appending a new LSB, and we set this new LSB equal to the bit we found
- The reason this reversed the int is because the LSB that gets appended keeps getting pushed down, so it could start as 0001 but end at 1000
- We then preform a right shift on N to get to the next LSB and return accordingly 
