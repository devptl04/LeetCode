You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.
Merge all the linked-lists into one sorted linked-list and return it.

Example 1:
Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6

Example 2:

Input: lists = []
Output: []

Example 3:
Input: lists = [[]]
Output: []
 
Constraints:
k == lists.length
0 <= k <= 104
0 <= lists[i].length <= 500
-104 <= lists[i][j] <= 104
lists[i] is sorted in ascending order.
The sum of lists[i].length will not exceed 104.

Code: 4ms | Beats 76.04% | Time Complexity: O(N log M) | Space Complexity: O(N)
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        ListNode head = new ListNode(0);
        ListNode current = head; 

        TreeMap<Integer, Integer> map = new TreeMap<>();
        for (int i = 0; i < lists.length; i++){
            ListNode curr = lists[i];
            while (curr != null){
                map.put(curr.val, map.getOrDefault(curr.val, 0) + 1);
                curr = curr.next; 
            }
        }
        for (Map.Entry<Integer, Integer> entry :  map.entrySet()){
            int size = entry.getValue();
            while (size-- > 0){
                ListNode new_node = new ListNode(entry.getKey());
                current.next = new_node;
                current = current.next; 
            }
        }
        return head.next; 
    }
}

Code Explanation: 
- For this problem, my thought process was that I wanted to iterate through all the possible nodes see how many duplicates there are, and reconstruct a new linked list based on this
- In order to do this, I iterated through each list, and through each list node in each list, adding the values to a treemap (since treemaps are sorted in ascending order) with the frequency of each node value
- Once I had the frequencies, I iterated through the treemap entries, initialized a new ListNode with the current value of the tree node entry, and added it to the list I initialized in the beginning of the code
- Once this loop terminated, I just needed to return the head.next since this was pointing to the first item in my merged list 
