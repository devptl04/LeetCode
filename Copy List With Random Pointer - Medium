A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null. Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list. For example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.

Return the head of the copied linked list. The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where: val: an integer representing Node.val random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node. Your code will only be given the head of the original linked list.

Example 1:
Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]

Constraints:

0 <= n <= 1000
-104 <= Node.val <= 104
Node.random is null or is pointing to some node in the linked list.

Code: Beats 100% Time Complexity: O(n)
class Solution {
    public Node copyRandomList(Node head) {
        if (head == null) return null;
        Map<Node, Node> map = new HashMap<>();
        Node curr = head; 
        map.put(curr, new Node(curr.val));

        while (curr != null){
            Node clone = map.get(curr);
            if (curr.next != null && !map.containsKey(curr.next)){
               map.put(curr.next, new Node(curr.next.val));
            }
            clone.next = map.get(curr.next);
            if (curr.random != null && !map.containsKey(curr.random)){
                map.put(curr.random, new Node(curr.random.val));
            }
            clone.random = map.get(curr.random);
            curr = curr.next; 
        }

        return map.get(head);
    }
}

Code Explanation: 
- For this problem, we are given a linked list that has an additional pointer to a random variable and are asked to create a deep copy of this entire list, meaning that it has no linkage to the provided list
- In order to do this, we create a hashmap. The hashmap will keep track of what copy nodes we have currently created, and we will append accordingly
- First, we check the base case, and then, we create a curr pointer for head and create/add the first copy to our map
- We create a loop condition to iterate through the list until it reaches null (the end), and we retrieve the cloned node that we are currently processing. We essentially want to add this node's pointers to the map as well as link the pointers accordinlgy to each node
- We first check to see if the value is null (to avoid any errors) and then check for its presence within the map for the next and random pointers, respectively. If its not, then we add both the current list's node as well as create a new copy for it. We then link the current copy node we are processing to this newly created pointer copy
- Before we go to the next iteration, we want to move curr to the next node. 
- Lastly, we return the head of the list by retrieving it via the map 
