Given the head of a singly linked list, reverse the list, and return the reversed list.

Example 1:
Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

Example 2:
Input: head = [1,2]
Output: [2,1]

Example 3:
Input: head = []
Output: []
 

Constraints:

The number of nodes in the list is the range [0, 5000].
-5000 <= Node.val <= 5000
 
Code: 
class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode prev = null;
        ListNode current = head; 

        while (current != null){
            ListNode next = current.next;
            current.next = prev; 
            prev = current; 
            current = next; 
        }

        return prev; 
    }
}

Code Explanation: 
- We essentially just want to swap each node and its next node, in order to do this we need to create two pointers
- So, while the current is not null, we create a next pointer, which holds the value that we need to swap next in the current order of the list, we need this variable since we are swapping the current with the previous node, so the current would no longer be pointing to the correct next node
- We swap current's next with prev and then set prev equal to current and move current down the list for its next iteration by setting current = next
- Once this loop terminates, prev is now the head of the list, so we return prev
