You are given an m x n integer matrix matrix with the following two properties: Each row is sorted in non-decreasing order. The first integer of each row is greater than the last integer of the previous row. Given an integer target, return true if target is in matrix or false otherwise. You must write a solution in O(log(m * n)) time complexity.

Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Example 2:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
 
Constraints:
m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-104 <= matrix[i][j], target <= 104

Code: Beats 100% Time Complexity: O(log(n+m))
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int row = 0;
        int col = matrix[0].length -1; 
        while (row < matrix.length && col >= 0){
            int curr = matrix[row][col];
            if (curr == target) return true;
            if (curr < target){
                row++;
            }else if (curr > target){
                col--;
            }
        }
        return false;
    }
}

Code Explanation: 
- For this problem, we want to find a target variable through binary search since we are given a time constraint. We need to effectively narrow our search window with each iteration, and given that the 2d array is in ascending order, we can utilize a row and col pointer to do this accordingly
- Each row increases the value and each column increases in value, but row is always greater than column
- So we initialize a row pointer that starts on the first row and a column variable that starts on the last digit in the current row. This means that if the value is less than the column, it must be within this row, if the value is greater than we know that this column cannot have the value so we move to a new row
- We essentially are figuring out which row as the value and then moving the column pointer to figure out the exact match 
- This runs in binary search time due to this algo

