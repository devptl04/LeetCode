You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

 

Example 1:

Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.
Example 2:

Input: nums = [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
Total amount you can rob = 2 + 9 + 1 = 12.
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 400

Code: 0ms | Beats: 100% | Time Complexity: 0(n)
class Solution {
    public int rob(int[] nums) {
        int[] dp = new int[nums.length];
        dp[0] = nums[0];
        if (nums.length > 1){
            dp[1] = Math.max(nums[0], nums[1]);
        }
        for (int i = 2; i < nums.length; i++){
            int in = dp[i-2] + nums[i];
            int out = dp[i-1] + 0;
            dp[i] = Math.max(in, out);
        }

        return dp[nums.length -1];
    }
}

Code Explanation:
- For this problem, we want to use dynamic programming because we can split up the main problem in multiple subproblems, which essentially boils down to if you either take from the current house and two houses making or if you skip the current house and just count the house before
- By doing so, the subproblems compile on top of each other and effectively give us the answer to the whole problem
- We initialize a dp array and since the first house can do nothing but rob that house, we initialize dp[0] to nums[0], and now the second house has option of either skipping that house or simply taking from the current house, so we initialize that accordingly
- Then we loop through the rest of the houses and look at the potential outcome on either skipping the house or robbing the house and append the max value
- Once the loop terminates the whole array will be full and we can take the last value, which will give us the best max for this problem
