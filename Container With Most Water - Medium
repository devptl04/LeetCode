You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).
Find two lines that together with the x-axis form a container, such that the container contains the most water.
Return the maximum amount of water a container can store.
Notice that you may not slant the container.

Example 1:
Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.

Example 2:
Input: height = [1,1]
Output: 1
 
Constraints:
n == height.length
2 <= n <= 105
0 <= height[i] <= 104

Code: 3ms | Beats 94.07%
class Solution {
    public int maxArea(int[] height) {
        int max = 0;
        int a = 0;
        int b = height.length-1;
        while (a < b){
            if (height[a] < height[b]){
                max = Math.max(max, height[a] * (b-a));
                a++;
            }else{
                max = Math.max(max, height[b] * (b-a));
                b--;
            }
        }
        return max; 
    }
}

Code Explanation: 
- This is a pretty simple two pointer problem, thought process is we basically iterate from the back and from of the array, checking whichever height is lower and seeing if the area at this point is greater than the current max area we have
- We initialize a pointer from the front of the height array and one for the end
- Within the while loop, we check to see which height is smaller and calculate the area accordingly and check if its greater than the current Max and increment accordingly 
- After this loop terminates, we have successfully found the largest area and can return the answer 
